package PegasusShared;

message CardDef {
	required int32 asset = 1;
	optional int32 premium = 2;
}

message DeckCardData {
	required CardDef def = 1;
	required int32 handle = 2 [default = 0];
	optional int32 qty = 3;
	required int32 prev = 5 [default = 0];
}

message BoosterInfo {
	required int32 type = 2;
	required int32 count = 3;
}

message Date {
	required int32 year = 1;
	required int32 month = 2;
	required int32 day = 3;
	required int32 hours = 4;
	required int32 min = 5;
	required int32 sec = 6;
}

message CardStack {
	required CardDef card_def = 1;
	required Date latest_insert_date = 2;
	required int32 count = 3;
	required int32 num_seen = 4;
}

message CachedCard {
	required int64 card_id = 1;
	required int32 asset_card_id = 2;
	required Date insert_date = 3;
	required bool is_seen = 4;
	required int32 premium = 5;
}

message CachedCollection {
	repeated CachedCard card_collection = 1;
}

message BnetId {
	required uint64 hi = 1;
	required uint64 lo = 2;
}

message ProfileNoticeMedal {
	enum NoticeID {
		ID = 1;
	}

	required int32 star_level = 1;
	optional int32 legend_rank = 2;
	optional int32 best_star_level = 3;
	optional RewardChest chest = 4;
}

message ProfileNoticeRewardBooster {
	enum NoticeID {
		ID = 2;
	}

	required int32 booster_type = 1;
	required int32 booster_count = 2;
}

message ProfileNoticeRewardCard {
	enum NoticeID {
		ID = 3;
	}

	required CardDef card = 1;
	optional int32 quantity = 2;
}

message ProfileNoticeDisconnectedGameResult {
	enum GameResult {
		GR_UNKNOWN = 0;
		GR_PLAYING = 1;
		GR_WINNER = 2;
		GR_TIE = 3;
	}
	enum PlayerResult {
		PR_UNKNOWN = 0;
		PR_WON = 1;
		PR_LOST = 2;
		PR_DISCONNECTED = 3;
		PR_QUIT = 4;
	}
	enum NoticeID {
		ID = 4;
	}

	optional GameType game_type = 8 [default = GT_UNKNOWN];
	optional int32 mission_id = 9;
	optional GameResult game_result = 10 [default = GR_UNKNOWN];
	optional PlayerResult your_result = 11 [default = PR_UNKNOWN];
	optional PlayerResult opponent_result = 12 [default = PR_UNKNOWN];
}

message ProfileNoticePreconDeck {
	enum NoticeID {
		ID = 5;
	}

	required int64 deck = 1;
	required int32 hero = 2;
}

message ProfileNoticeRewardDust {
	enum NoticeID {
		ID = 6;
	}

	required int32 amount = 1;
}

message ProfileNoticeRewardMount {
	enum NoticeID {
		ID = 7;
	}

	required int32 mount_id = 1;
}

message ProfileNoticeRewardForge {
	enum NoticeID {
		ID = 8;
	}

	required int32 quantity = 1;
}

message ProfileNoticeRewardGold {
	enum NoticeID {
		ID = 9;
	}

	required int32 amount = 1;
}

message ProfileNoticePurchase {
	enum NoticeID {
		ID = 10;
	}

	required string product_id = 1;
	optional int64 data = 2;
	optional int32 currency = 3;
}

message ProfileNoticeCardBack {
	enum NoticeID {
		ID = 11;
	}

	required int32 card_back = 1;
}

message ProfileNoticeBonusStars {
	enum NoticeID {
		ID = 12;
	}

	required int32 star_level = 1;
	required int32 stars = 2;
}

message ProfileNoticeRewardCard2x {
	enum NoticeID {
		ID = 13;
	}
}

message ProfileNoticeAdventureProgress {
	enum NoticeID {
		ID = 14;
	}

	required int32 wing_id = 1;
}

message ProfileNoticeLevelUp {
	enum NoticeID {
		ID = 15;
	}

	required int32 hero_class = 1;
	required int32 new_level = 2;
}

message ProfileNoticeAccountLicense {
	enum NoticeID {
		ID = 16;
	}

	required int64 license = 1;
	required int64 cas_id = 2;
}

message PlayQueueInfo {
	required BnetGameType game_type = 1;
}

message Platform {
	required int32 os = 1;
	required int32 screen = 2;
	required string name = 3;
	optional int32 store = 4;
}

message DeckInfo {
	enum ValidityFlags {
		UNLOCKED_HERO_CLASS = 1;
		OWNS_CARDS = 2;
		HAS_30_CARDS = 4;
		OBEYS_MAXES = 8;
		CLASS_MATCHES = 16;
		OWNS_CARD_BACK = 32;
		OWNS_HERO = 64;
		TAGGED_MODERN = 128;
		NEEDS_VALIDATION = 256;
		NEEDS_NAME = 512;
	}

	required int64 id = 1;
	required string name = 2;
	required int32 card_back = 3;
	required int32 hero = 4;
	required DeckType deck_type = 5;
	required uint64 validity = 6;
	required int32 hero_premium = 7;
	required bool card_back_override = 8;
	required bool hero_override = 9;
	optional int64 last_modified = 10;
	optional int32 season_id = 11;
	optional int64 sort_order = 12;
}

message AdventureProgress {
	enum Flags {
		OWNED = 1;
		DEFEAT_HEROIC_MISSION_1 = 2;
		DEFEAT_HEROIC_MISSION_2 = 4;
		DEFEAT_HEROIC_MISSION_3 = 8;
		DEFEAT_HEROIC_MISSION_4 = 16;
		DEFEAT_CLASS_CHALLENGE_MISSION_1 = 256;
		DEFEAT_CLASS_CHALLENGE_MISSION_2 = 512;
	}

	required int32 wing_id = 1;
	required int32 progress = 2;
	optional int32 ack = 3 [default = 0];
	required uint64 flags = 4;
}

message FavoriteHero {
	required int32 class_id = 1;
	required CardDef hero = 2;
}

message AccountLicenseInfo {
	enum Flags {
		OWNED = 1;
	}

	required int64 license = 1;
	required uint64 flags = 2;
	required int64 cas_id = 3;
}

message RewardBag {
	optional ProfileNoticeRewardBooster reward_booster = 1;
	optional ProfileNoticeRewardCard reward_card = 2;
	optional ProfileNoticeRewardDust reward_dust = 3;
	optional ProfileNoticeRewardGold reward_gold = 4;
	optional ProfileNoticeCardBack reward_card_back = 5;
}

message RewardChest {
	optional RewardBag bag1 = 1;
	optional RewardBag bag2 = 2;
	optional RewardBag bag3 = 3;
	optional RewardBag bag4 = 4;
	optional RewardBag bag5 = 5;
}

message LocalizedStringValue {
	required int32 locale = 1;
	required string value = 2;
}

message LocalizedString {
	required string key = 1;
	optional string deprecated_value = 2;
	optional int32 deprecated_locale = 3;
	repeated LocalizedStringValue values = 4;
	extend .PegasusShared.DeckRulesetRuleDbRecord {
		repeated LocalizedString strings = 100;
	}
}

message GameSetupRule {
	required int32 id = 1;
	required RuleType rule_type = 2;
	required int64 data1 = 3;
	required int64 data2 = 4;
	required int64 data3 = 5;
}

message Vector2 {
	required float x = 1 [default = 0];
	required float y = 2 [default = 0];
}

message ScenarioDbRecord {
	required int32 id = 1;
	optional string note_desc = 2;
	required int32 num_players = 3;
	required int64 player1_hero_card_id = 4;
	required int64 player2_hero_card_id = 5;
	required bool is_expert = 6;
	required int32 adventure_id = 7;
	optional int32 adventure_mode_id = 8;
	required int32 wing_id = 9;
	required int32 sort_order = 10;
	optional int64 client_player2_hero_card_id = 11;
	optional string tavern_brawl_texture = 12;
	optional string tavern_brawl_texture_phone = 13;
	optional Vector2 tavern_brawl_texture_phone_offset = 14;
	optional bool is_coop = 15;
	optional int32 deck_ruleset_id = 16;
	repeated LocalizedString strings = 100;
	repeated GameSetupRule rules = 101;
}

message DeckRulesetRuleDbRecord {
	required int32 id = 1;
	required int32 deck_ruleset_id = 2;
	optional int32 applies_to_subset_id = 3;
	optional bool applies_to_is_not = 4;
	required string rule_type = 5;
	required bool rule_is_not = 6;
	optional int32 min_value = 7;
	optional int32 max_value = 8;
	optional int32 tag = 9;
	optional int32 tag_min_value = 10;
	optional int32 tag_max_value = 11;
	optional string string_value = 12;
	repeated int32 target_subset_ids = 13;
	extensions 100 to 10000;
}

message DeckRulesetDbRecord {
	required int32 id = 1;
	repeated DeckRulesetRuleDbRecord rules = 2;
	extend AssetResponse {
		optional DeckRulesetDbRecord deck_ruleset_asset = 102;
	}
}

message SubsetCardListDbRecord {
	required int32 subset_id = 1;
	repeated int32 card_ids = 2;
	extend AssetResponse {
		optional SubsetCardListDbRecord subset_card_list_asset = 101;
	}
}

message AssetKey {
	required AssetType type = 1;
	optional int32 asset_id = 2;
}

message AssetRecordInfo {
	required AssetKey asset = 1;
	required uint32 record_byte_size = 2;
	required bytes record_hash = 3;
	extend .PegasusShared.TavernBrawlSpec {
		repeated AssetRecordInfo additional_assets = 100;
	}
}

message TavernBrawlSpec {
	optional uint64 end_seconds_from_now = 1;
	required int32 scenario_id = 2;
	required uint32 scenario_record_byte_size = 3;
	required bytes scenario_record_hash = 4;
	required RewardType reward_type = 5;
	required int64 reward_data1 = 6;
	required int64 reward_data2 = 7;
	optional RewardTrigger reward_trigger = 8 [default = REWARD_TRIGGER_UNKNOWN];
	required int32 season_id = 11;
	required TavernBrawlPlayerRecord my_record = 105;
    extensions 100 to 104;
	extensions 106 to 10000;
}

message TavernBrawlPlayerRecord {
	required int32 reward_progress = 1;
	optional int32 games_played = 2;
	required int32 games_won = 3;
	optional int32 win_streak = 4;
}

enum GameType {
	GT_UNKNOWN = 0;
	GT_VS_AI = 1;
	GT_VS_FRIEND = 2;
	GT_TUTORIAL = 4;
	GT_ARENA = 5;
	GT_TEST = 6;
	GT_RANKED = 7;
	GT_UNRANKED = 8;
	GT_TAVERNBRAWL = 16;
	GT_TB_1P_VS_AI = 17;
	GT_TB_2P_COOP = 18;
	GT_LAST = 17;
}

enum BnetGameType {
	BGT_UNKNOWN = 0;
	BGT_FRIENDS = 1;
	BGT_RANKED = 2;
	BGT_ARENA = 3;
	BGT_VS_AI = 4;
	BGT_TUTORIAL = 5;
	BGT_ASYNC = 6;
	BGT_NEWBIE = 9;
	BGT_NORMAL = 10;
	BGT_TEST1 = 11;
	BGT_TEST2 = 12;
	BGT_TEST3 = 13;
	BGT_TAVERNBRAWL_PVP = 16;
	BGT_TAVERNBRAWL_1P_VERSUS_AI = 17;
	BGT_TAVERNBRAWL_2P_COOP = 18;
	BGT_LAST = 19;
}

enum DeckType {
	NORMAL_DECK = 1;
	AI_DECK = 2;
	DRAFT_DECK = 4;
	PRECON_DECK = 5;
	TAVERN_BRAWL_DECK = 6;
	HIDDEN_DECK = 1000;
}

enum RuleType {
	RULE_NONE = 0;
	RULE_CHOOSE_HERO = 1;
	RULE_CHOOSE_DECK = 2;
}

enum AssetType {
	ASSET_TYPE_SCENARIO = 1;
	ASSET_TYPE_SUBSET_CARD = 2;
	ASSET_TYPE_DECK_RULESET = 3;
}

enum RewardType {
	REWARD_UNKNOWN = 0;
	REWARD_NONE = 1;
	REWARD_ADVENTURE_PROGRESS = 2;
	REWARD_ARCANE_DUST = 3;
	REWARD_BASIC_CARD = 4;
	REWARD_BOOSTER_PACKS = 5;
	REWARD_CARD_BACK = 6;
	REWARD_CARD_ID = 7;
	REWARD_CARD_ID_2X = 8;
	REWARD_CARD_SET = 9;
	DEPRECATED_REWARD_CRAFTABLE_GOLDEN = 10;
	REWARD_GOLD = 11;
	REWARD_GOLD_HERO = 12;
	REWARD_FORGE_TICKETS = 13;
	REWARD_HERO = 14;
	REWARD_EXTERNAL_GAME_MOUNT = 15;
}

enum RewardTrigger {
	REWARD_TRIGGER_UNKNOWN = 0;
	REWARD_TRIGGER_NONE = 1;
	REWARD_TRIGGER_WIN_GAME = 2;
	REWARD_TRIGGER_FINISH_GAME = 3;
}

enum DatabaseResult {
	DB_E_SQL_EX = -1;
	DB_E_UNKNOWN = 0;
	DB_E_SUCCESS = 1;
	DB_E_NOT_OWNED = 2;
	DB_E_CONSTRAINT = 3;
	DB_E_NOT_FOUND = 4;
	DB_E_EXCEPTION = 9;
	DB_E_BAD_PARAM = 11;
}

enum BattlePayProvider {
	BP_PROVIDER_BLIZZARD = 1;
	BP_PROVIDER_APPLE = 2;
	BP_PROVIDER_GOOGLE_PLAY = 3;
	BP_PROVIDER_AMAZON = 4;
}

enum DatabaseAction {
	DB_A_UNKNOWN = 0;
	DB_A_GET_DECK = 1;
	DB_A_CREATE_DECK = 2;
	DB_A_RENAME_DECK = 3;
	DB_A_DELETE_DECK = 4;
	DB_A_SET_DECK = 5;
	DB_A_OPEN_BOOSTER = 6;
	DB_A_GAMES_INFO = 7;
}

message ClientOption {
	required int32 index = 1;
	optional bool as_bool = 2;
	optional int32 as_int32 = 3;
	optional int64 as_int64 = 4;
	optional float as_float = 5;
	optional uint64 as_uint64 = 6;
}

message PurchaseError {
	enum Error {
		E_UNKNOWN = -1;
		E_SUCCESS = 0;
		E_STILL_IN_PROGRESS = 1;
		E_INVALID_BNET = 2;
		E_SERVICE_NA = 3;
		E_PURCHASE_IN_PROGRESS = 4;
		E_DATABASE = 5;
		E_INVALID_QUANTITY = 6;
		E_DUPLICATE_LICENSE = 7;
		E_REQUEST_NOT_SENT = 8;
		E_NO_ACTIVE_BPAY = 9;
		E_FAILED_RISK = 10;
		E_CANCELED = 11;
		E_WAIT_MOP = 12;
		E_WAIT_CLIENT_CONFIRM = 13;
		E_WAIT_CLIENT_RISK = 14;
		E_PRODUCT_NA = 15;
		E_RISK_TIMEOUT = 16;
		E_PRODUCT_ALREADY_OWNED = 17;
		E_WAIT_THIRD_PARTY_RECEIPT = 18;
		E_PRODUCT_EVENT_HAS_ENDED = 19;
		E_BP_GENERIC_FAIL = 100;
		E_BP_INVALID_CC_EXPIRY = 101;
		E_BP_RISK_ERROR = 102;
		E_BP_NO_VALID_PAYMENT = 103;
		E_BP_PAYMENT_AUTH = 104;
		E_BP_PROVIDER_DENIED = 105;
		E_BP_PURCHASE_BAN = 106;
		E_BP_SPENDING_LIMIT = 107;
		E_BP_PARENTAL_CONTROL = 108;
		E_BP_THROTTLED = 109;
		E_BP_THIRD_PARTY_BAD_RECEIPT = 110;
		E_BP_THIRD_PARTY_RECEIPT_USED = 111;
		E_BP_PRODUCT_UNIQUENESS_VIOLATED = 112;
		E_BP_REGION_IS_DOWN = 113;
		E_BP_GENERIC_FAIL_RETRY_CONTACT_CS_IF_PERSISTS = 115;
		E_BP_CHALLENGE_ID_FAILED_VERIFICATION = 116;
	}

	required Error error = 1;
	optional string purchase_in_progress = 2;
	optional string error_code = 3;
}

message NearbyPlayer {
	required uint64 bnet_id_hi = 1;
	required uint64 bnet_id_lo = 2;
	required uint64 session_start_time = 3;
}

message SpecialEventTiming {
	required string event = 1;
	optional uint64 start = 2;
	optional uint64 end = 3;
}

message CardValue {
	required PegasusShared.CardDef card = 1;
	required int32 buy = 2;
	required int32 sell = 3;
	required bool nerfed = 4;
}

message Achieve {
	required int32 id = 1;
	required int32 progress = 2;
	required int32 ack_progress = 3;
	optional int32 completion_count = 4;
	optional bool active = 5;
	optional int32 started_count = 6;
	optional PegasusShared.Date date_given = 7;
	optional PegasusShared.Date date_completed = 8;
	optional bool do_not_ack = 9;
}

message AdventureOptions {
	required int32 adventure_id = 1;
	required uint64 options = 2;
}

message ProfileNotice {
	required int64 entry = 1;
	optional PegasusShared.ProfileNoticeMedal medal = 2;
	optional PegasusShared.ProfileNoticeRewardBooster reward_booster = 3;
	optional PegasusShared.ProfileNoticeRewardCard reward_card = 4;
	optional PegasusShared.ProfileNoticePreconDeck precon_deck = 6;
	optional PegasusShared.ProfileNoticeRewardDust reward_dust = 7;
	optional PegasusShared.ProfileNoticeRewardGold reward_gold = 8;
	optional PegasusShared.ProfileNoticeRewardMount reward_mount = 9;
	optional PegasusShared.ProfileNoticeRewardForge reward_forge = 10;
	required int32 origin = 11;
	optional int64 origin_data = 12;
	required PegasusShared.Date when = 13;
	optional PegasusShared.ProfileNoticePurchase purchase = 14;
	optional PegasusShared.ProfileNoticeCardBack reward_card_back = 15;
	optional PegasusShared.ProfileNoticeDisconnectedGameResult dc_game_result = 16;
	optional PegasusShared.ProfileNoticeBonusStars bonus_stars = 17;
	optional PegasusShared.ProfileNoticeAdventureProgress adventure_progress = 18;
	optional PegasusShared.ProfileNoticeLevelUp level_up = 19;
	optional PegasusShared.ProfileNoticeAccountLicense account_license = 20;
}

message BoosterCard {
	required PegasusShared.CardDef card_def = 1;
	required PegasusShared.Date insert_date = 2;
}

message MedalHistoryInfo {
	required int32 season = 1;
	required PegasusShared.Date when = 2;
	required int32 stars = 3;
	required int32 star_level = 4;
	required int32 level_start = 5;
	required int32 level_end = 6;
	optional int32 legend_rank = 7;
}

message CardUseCount {
	required int32 asset = 1;
	required int32 count = 2;
}

message BundleItem {
	required ProductType product_type = 1;
	required int32 data = 2;
	required int32 quantity = 3;
}

message Bundle {
	required string id = 1;
	required double cost = 2;
	optional string apple_id = 3;
	optional string google_play_id = 4;
	repeated BundleItem items = 5;
	optional int64 gold_cost = 6;
	optional string amazon_id = 7;
	optional string product_event_name = 9;
}

message GoldCostBooster {
	required int64 cost = 1;
	required int32 pack_type = 2;
}

message PlayerRecord {
	required PegasusShared.GameType type = 1;
	optional int32 data = 2;
	required int32 wins = 3;
	required int32 losses = 4;
	optional int32 ties = 5;
}

message NextHeroLevelReward {
	required int32 level = 1;
	optional PegasusShared.ProfileNoticeRewardBooster reward_booster = 2;
	optional PegasusShared.ProfileNoticeRewardCard reward_card = 3;
	optional PegasusShared.ProfileNoticeRewardDust reward_dust = 4;
	optional PegasusShared.ProfileNoticeRewardGold reward_gold = 5;
	optional PegasusShared.ProfileNoticeRewardMount reward_mount = 6;
	optional PegasusShared.ProfileNoticeRewardForge reward_forge = 7;
}

message HeroXPInfo {
	required int32 class_id = 1;
	required int32 level = 2;
	required int64 curr_xp = 3;
	required int64 max_xp = 4;
	optional NextHeroLevelReward next_reward = 5;
}

message AssetResponse {
	required PegasusShared.AssetKey requested_key = 1;
	required PegasusShared.DatabaseResult error_code = 2;
	optional PegasusShared.ScenarioDbRecord scenario_asset = 100;
	extensions 101 to 10000;
}

message DeckSetData {
	enum PacketID {
		ID = 222;
		System = 0;
	}

	required int64 deck = 1;
	repeated PegasusShared.DeckCardData cards = 2;
	optional PegasusShared.CardDef hero = 3;
	optional int32 card_back = 4;
}

message ValidateAchieve {
	enum PacketID {
		ID = 284;
		System = 0;
	}

	required int32 achieve = 1;
}

message UpdateLogin {
	enum PacketID {
		ID = 205;
		System = 0;
	}

	optional bool reply_required = 1;
	optional string referral = 2;
	optional string device_model = 3;
}

message DevBnetIdentify {
	enum PacketID {
		ID = 259;
		System = 0;
	}

	required string name = 1;
}

message SetOptions {
	enum PacketID {
		ID = 239;
		System = 0;
	}

	repeated ClientOption options = 1;
}

message GetOptions {
	enum PacketID {
		ID = 240;
		System = 0;
	}

	repeated int32 keys = 1 [packed = true];
}

message GetAccountInfo {
	enum Request {
		LAST_LOGIN = 1;
		DECK_LIST = 2;
		COLLECTION = 3;
		MEDAL_INFO = 4;
		MEDAL_HISTORY = 5;
		BOOSTERS = 6;
		CARD_BACKS = 7;
		PLAYER_RECORD = 8;
		GAMES_PLAYED = 9;
		DECK_LIMIT = 10;
		CAMPAIGN_INFO = 11;
		NOTICES = 12;
		MOTD = 13;
		CLIENT_OPTIONS = 14;
		CARD_VALUES = 15;
		DISCONNECTED = 16;
		ARCANE_DUST_BALANCE = 17;
		FEATURES = 18;
		REWARD_PROGRESS = 19;
		GOLD_BALANCE = 20;
		HERO_XP = 21;
		PVP_QUEUE = 22;
		NOT_SO_MASSIVE_LOGIN = 23;
		BOOSTER_TALLY = 24;
		TAVERN_BRAWL_INFO = 25;
		TAVERN_BRAWL_RECORD = 26;
		FAVORITE_HEROES = 27;
		ACCOUNT_LICENSES = 28;
	}
	enum PacketID {
		ID = 201;
		System = 0;
	}

	required Request request = 1;
}

message GetDeck {
	enum PacketID {
		ID = 214;
		System = 0;
	}

	required int64 deck = 1;
}

message CreateDeck {
	enum PacketID {
		ID = 209;
		System = 0;
	}

	required string name = 1;
	required int32 hero = 2;
	required int32 hero_premium = 3;
	required PegasusShared.DeckType deck_type = 4;
}

message DeleteDeck {
	enum PacketID {
		ID = 210;
		System = 0;
	}

	required int64 deck = 1;
}

message RenameDeck {
	enum PacketID {
		ID = 211;
		System = 0;
	}

	required int64 deck = 1;
	required string name = 2;
}

message AckNotice {
	enum PacketID {
		ID = 213;
		System = 0;
	}

	required int64 entry = 1;
}

message OpenBooster {
	enum PacketID {
		ID = 225;
		System = 0;
	}

	required int32 booster_type = 2;
}

message Subscribe {
	enum PacketID {
		ID = 314;
	}
}

message Unsubscribe {
	enum PacketID {
		ID = 329;
	}
}

message OneClientTracking {
	enum Level {
		L_INFO = 1;
		L_WARNING = 2;
		L_ERROR = 3;
	}

	required Level level = 1;
	required int32 what = 2;
	required uint64 timestamp = 4;
	optional string message = 3;
}

message ClientTracking {
	enum PacketID {
		ID = 228;
		System = 0;
	}

	repeated OneClientTracking info = 4;
}

message SetProgress {
	enum PacketID {
		ID = 230;
		System = 0;
	}

	required int64 value = 1;
}

message AckCardSeen {
	enum PacketID {
		ID = 223;
		System = 0;
	}

	repeated PegasusShared.CardDef card_defs = 1;
}

message CardBacks {
	enum PacketID {
		ID = 236;
		System = 0;
	}

	required int32 default_card_back = 1;
	repeated int32 card_backs = 2;
}

message DraftBegin {
	enum PacketID {
		ID = 235;
		System = 0;
	}
}

message DraftRetire {
	enum PacketID {
		ID = 242;
		System = 0;
	}

	required int64 deck_id = 1;
	required int32 slot = 2;
}

message DraftAckRewards {
	enum PacketID {
		ID = 287;
		System = 0;
	}

	required int64 deck_id = 1;
	required int32 slot = 2;
}

message DraftGetPicksAndContents {
	enum PacketID {
		ID = 244;
		System = 0;
	}
}

message DraftMakePick {
	enum PacketID {
		ID = 245;
		System = 0;
	}

	required int64 deck_id = 1;
	required int32 slot = 2;
	required int32 index = 3;
}

message GetAchieves {
	enum PacketID {
		ID = 253;
		System = 0;
	}

	optional bool only_active_or_new_complete = 1;
}

message AckAchieveProgress {
	enum PacketID {
		ID = 243;
		System = 0;
	}

	required int32 id = 1;
	required int32 ack_progress = 2;
}

message BuySellCard {
	enum PacketID {
		ID = 257;
		System = 0;
	}

	required PegasusShared.CardDef def = 1;
	optional int32 count = 2;
	required bool buying = 3;
	optional int32 unit_sell_price = 4;
	optional int32 unit_buy_price = 5;
}

message GetPurchaseMethod {
	enum PacketID {
		ID = 250;
		System = 1;
	}

	required string product_id = 1;
	required int32 quantity = 2;
	required int32 currency = 3;
	required string device_id = 4;
	optional PegasusShared.Platform platform = 5;
}

message DoPurchase {
	enum PacketID {
		ID = 273;
		System = 1;
	}
}

message CancelPurchase {
	enum CancelReason {
		PROVIDER_REPORTED_FAILURE = 1;
		NOT_RECOGNIZED_BY_PROVIDER = 2;
		USER_CANCELED_BEFORE_PAYMENT = 3;
		USER_CANCELING_TO_UNBLOCK = 4;
		CHALLENGE_TIMEOUT = 5;
		CHALLENGE_DENIED = 6;
		CHALLENGE_OTHER_ERROR = 7;
	}
	enum PacketID {
		ID = 274;
		System = 1;
	}

	required bool is_auto_cancel = 1;
	optional CancelReason reason = 2 [default = PROVIDER_REPORTED_FAILURE];
	required string device_id = 3;
	optional string error_message = 4;
}

message CheckAccountLicenses {
	enum PacketID {
		ID = 267;
		System = 0;
	}
}

message CheckGameLicenses {
	enum PacketID {
		ID = 276;
		System = 1;
	}
}

message GetBattlePayConfig {
	enum PacketID {
		ID = 237;
		System = 1;
	}
}

message GetBattlePayStatus {
	enum PacketID {
		ID = 255;
		System = 1;
	}
}

message CancelQuest {
	enum PacketID {
		ID = 281;
		System = 0;
	}

	required int32 quest_id = 1;
}

message MassDisenchantRequest {
	enum PacketID {
		ID = 268;
		System = 0;
	}
}

message PurchaseWithGold {
	enum PacketID {
		ID = 279;
		System = 0;
	}

	required int32 quantity = 1;
	required ProductType product = 2;
	optional int32 data = 3;
}

message SetCardBack {
	enum PacketID {
		ID = 291;
		System = 0;
	}

	required int32 card_back = 1;
	optional int64 deck_id = 2;
}

message ThirdPartyReceiptData {
	optional string third_party_id = 1;
	optional string receipt = 2;
	optional string third_party_user_id = 3;
}

message SubmitThirdPartyReceipt {
	enum PacketID {
		ID = 293;
		System = 1;
	}

	required ThirdPartyReceiptData receipt_data = 1;
	required int64 transaction_id = 2;
}

message GetThirdPartyPurchaseStatus {
	enum PacketID {
		ID = 294;
		System = 1;
	}

	required string third_party_id = 1;
}

message CheckAccountLicenseAchieve {
	enum PacketID {
		ID = 297;
		System = 1;
	}

	required int32 achieve = 1;
}

message TriggerLaunchDayEvent {
	enum PacketID {
		ID = 298;
		System = 0;
	}

	required NearbyPlayer last_played = 1;
	required NearbyPlayer other_player = 2;
}

message GetAssetsVersion {
	enum PacketID {
		ID = 303;
		System = 0;
	}
}

message GetAdventureProgress {
	enum PacketID {
		ID = 305;
		System = 0;
	}
}

message SetAdventureOptions {
	enum PacketID {
		ID = 310;
		System = 0;
	}

	required AdventureOptions adventure_options = 1;
}

message StartThirdPartyPurchase {
	enum PacketID {
		ID = 312;
		System = 1;
	}

	required PegasusShared.BattlePayProvider provider = 1;
	required string product_id = 2;
	required int32 quantity = 3;
	optional ThirdPartyReceiptData dangling_receipt_data = 4;
	required string device_id = 5;
}

message SetFavoriteHero {
	enum PacketID {
		ID = 319;
		System = 0;
	}

	required PegasusShared.FavoriteHero favorite_hero = 1;
}

message GetAssetRequest {
	enum PacketID {
		ID = 321;
		System = 0;
	}

	repeated PegasusShared.AssetKey requests = 1;
	required int32 client_token = 2;
}

message DebugCommandRequest {
	enum PacketID {
		ID = 322;
		System = 0;
	}

	required string command = 1;
	repeated string args = 2;
}

message NotSoMassiveLoginReply {
	enum PacketID {
		ID = 300;
	}

	repeated SpecialEventTiming special_event_timing = 10;
	optional TavernBrawlInfo tavern_brawls = 11;
}

message UpdateLoginComplete {
	enum PacketID {
		ID = 307;
	}
}

message AckWingProgress {
	enum PacketID {
		ID = 308;
		System = 0;
	}

	required int32 wing = 1;
	required int32 ack = 2;
}

message AcknowledgeBanner {
	enum PacketID {
		ID = 309;
		System = 0;
	}

	required int32 banner = 1;
}

message Disconnected {
	enum PacketID {
		ID = 289;
	}

	optional string address = 1;
	optional int32 game_handle = 2;
	optional int64 client_handle = 3;
	optional int32 port = 4;
	optional string version = 5;
	optional string aurora_password = 6;
	optional int32 scenario = 7;
}

message ValidateAchieveResponse {
	enum PacketID {
		ID = 285;
	}

	required int32 achieve = 1;
}

message PlayQueue {
	enum PacketID {
		ID = 286;
	}

	required PegasusShared.PlayQueueInfo queue = 1;
}

message GuardianVars {
	enum PacketID {
		ID = 264;
	}

	optional bool tourney = 1;
	optional bool practice = 2;
	optional bool casual = 3;
	optional bool forge = 4;
	optional bool friendly = 5;
	optional bool manager = 6;
	optional bool crafting = 7;
	optional bool hunter = 8;
	optional bool mage = 9;
	optional bool paladin = 10;
	optional bool priest = 11;
	optional bool rogue = 12;
	optional bool shaman = 13;
	optional bool warlock = 14;
	optional bool warrior = 15;
	optional int32 show_user_u_i = 16;
	optional bool store = 17;
	optional bool battle_pay = 18;
	optional bool buy_with_gold = 19;
	optional bool tavern_brawl = 20;
}

message ArcaneDustBalance {
	enum PacketID {
		ID = 262;
	}

	required int64 balance = 1;
}

message GoldBalance {
	enum PacketID {
		ID = 278;
	}

	required int64 capped_balance = 1;
	required int64 bonus_balance = 2;
	required int64 cap = 3;
	required int64 cap_warning = 4;
}

message CardValues {
	enum PacketID {
		ID = 260;
	}

	repeated CardValue cards = 1;
	required int32 card_nerf_index = 2;
}

message BoughtSoldCard {
	enum Result {
		GENERIC_FAILURE = 1;
		SOLD = 2;
		BOUGHT = 3;
		SOULBOUND = 4;
		WRONG_SELL_PRICE = 5;
		WRONG_BUY_PRICE = 6;
		NO_PERMISSION = 7;
		EVENT_NOT_ACTIVE = 8;
	}
	enum PacketID {
		ID = 258;
	}

	required PegasusShared.CardDef def = 1;
	required int32 amount = 2;
	required Result result = 3;
	optional int32 count = 4;
	optional bool nerfed = 5;
	optional int32 unit_sell_price = 6;
	optional int32 unit_buy_price = 7;
}

message NOP {
	enum PacketID {
		ID = 254;
	}
}

message Achieves {
	enum PacketID {
		ID = 252;
	}

	repeated Achieve list = 1;
}

message DraftError {
	enum ErrorCode {
		DE_UNKNOWN = 0;
		DE_NO_LICENSE = 1;
		DE_RETIRE_FIRST = 2;
		DE_NOT_IN_DRAFT = 3;
		DE_BAD_DECK = 4;
		DE_BAD_SLOT = 5;
		DE_BAD_INDEX = 6;
		DE_NOT_IN_DRAFT_BUT_COULD_BE = 7;
		DE_FEATURE_DISABLED = 8;
	}
	enum PacketID {
		ID = 251;
	}

	required ErrorCode error_code = 1;
}

message DraftBeginning {
	enum PacketID {
		ID = 246;
	}

	required int64 deck_id = 1;
	repeated PegasusShared.CardDef choice_list = 3;
}

message DraftRetired {
	enum PacketID {
		ID = 247;
	}

	required int64 deck_id = 1;
	required PegasusShared.RewardChest chest = 2;
}

message DraftRewardsAcked {
	enum PacketID {
		ID = 288;
	}

	required int64 deck_id = 1;
}

message DraftChoicesAndContents {
	enum PacketID {
		ID = 248;
	}

	required int64 deck_id = 1;
	required int32 slot = 2;
	repeated PegasusShared.DeckCardData cards = 5;
	required int32 wins = 6;
	required int32 losses = 7;
	optional PegasusShared.RewardChest chest = 8;
	repeated PegasusShared.CardDef choice_list = 9;
	required PegasusShared.CardDef hero_def = 10;
	optional int32 max_wins = 11;
}

message DraftChosen {
	enum PacketID {
		ID = 249;
	}

	required PegasusShared.CardDef chosen = 3;
	repeated PegasusShared.CardDef next_choice_list = 4;
}

message ClientOptions {
	enum PacketID {
		ID = 241;
	}

	repeated ClientOption options = 1;
	optional bool failed = 2;
}

message ProfileDeckLimit {
	enum PacketID {
		ID = 231;
	}

	required int32 deck_limit = 1;
}

message ProfileProgress {
	enum PacketID {
		ID = 233;
	}

	required int64 progress = 1;
	required int32 best_forge = 2;
	optional PegasusShared.Date last_forge = 3;
	optional int32 display_banner = 4 [default = 0];
	repeated AdventureOptions adventure_options = 5;
}

message ProfileNotices {
	enum PacketID {
		ID = 212;
	}

	repeated ProfileNotice list = 1;
}

message DeckList {
	enum PacketID {
		ID = 202;
	}

	repeated PegasusShared.DeckInfo decks = 1;
}

message Collection {
	enum PacketID {
		ID = 207;
	}

	repeated PegasusShared.CardStack stacks = 1;
}

message DeckContents {
	enum PacketID {
		ID = 215;
	}

	required int64 deck = 1;
	repeated PegasusShared.DeckCardData cards = 2;
}

message DBAction {
	enum PacketID {
		ID = 216;
	}

	required PegasusShared.DatabaseAction action = 1;
	required PegasusShared.DatabaseResult result = 2;
	optional int64 meta_data = 3;
}

message DeckCreated {
	enum PacketID {
		ID = 217;
	}

	required PegasusShared.DeckInfo info = 1;
}

message DeckDeleted {
	enum PacketID {
		ID = 218;
	}

	required int64 deck = 1;
}

message DeckRenamed {
	enum PacketID {
		ID = 219;
	}

	required int64 deck = 1;
	required string name = 2;
}

message BoosterList {
	enum PacketID {
		ID = 224;
	}

	repeated PegasusShared.BoosterInfo list = 1;
}

message BoosterContent {
	enum PacketID {
		ID = 226;
	}

	repeated BoosterCard list = 1;
}

message MedalInfo {
	enum PacketID {
		ID = 232;
	}

	required int32 season_wins = 3;
	required int32 stars = 6;
	required int32 streak = 7;
	required int32 star_level = 8;
	required int32 level_start = 9;
	required int32 level_end = 10;
	required bool can_lose_level = 11;
	optional int32 legend_rank = 13;
	optional int32 best_star_level = 14;
	optional bool can_lose_stars = 15;
}

message MedalHistory {
	enum PacketID {
		ID = 234;
	}

	repeated MedalHistoryInfo medals = 1;
}

message GamesInfo {
	enum PacketID {
		ID = 208;
	}

	required int32 games_started = 1;
	required int32 games_won = 2;
	required int32 games_lost = 3;
	required int32 free_reward_progress = 4;
}

message PurchaseMethod {
	enum PacketID {
		ID = 272;
	}

	optional string product_id = 1;
	optional int32 quantity = 2;
	optional int32 currency = 3;
	optional string wallet_name = 4;
	optional bool use_ebalance = 5;
	optional PurchaseError error = 6;
	optional int64 transaction_id = 7;
	optional bool is_zero_cost_license = 8;
	optional string challenge_id = 9;
	optional string challenge_url = 10;
}

message PurchaseResponse {
	enum PacketID {
		ID = 256;
	}

	required PurchaseError error = 1;
	optional int64 transaction_id = 2;
	optional string product_id = 3;
	optional string third_party_id = 4;
	optional int32 currency = 5;
	optional bool is_zero_cost_license = 6;
}

message BattlePayConfigResponse {
	enum PacketID {
		ID = 238;
	}

	repeated Bundle bundles = 1;
	optional int32 currency = 2;
	optional bool unavailable = 4;
	optional int32 secs_before_auto_cancel = 5;
	repeated GoldCostBooster gold_cost_boosters = 6;
	optional int64 gold_cost_arena = 7;
}

message BattlePayStatusResponse {
	enum PurchaseState {
		PS_READY = 0;
		PS_CHECK_RESULTS = 1;
		PS_ERROR = 2;
	}
	enum PacketID {
		ID = 265;
	}

	required PurchaseState status = 1;
	optional string product_id = 2;
	optional PurchaseError purchase_error = 3;
	required bool battle_pay_available = 4;
	optional int64 transaction_id = 5;
	optional string third_party_id = 6;
	optional int32 currency = 7;
	optional PegasusShared.BattlePayProvider provider = 8 [default = BP_PROVIDER_BLIZZARD];
}

message MassDisenchantResponse {
	enum PacketID {
		ID = 269;
	}

	required int32 amount = 1;
}

message PlayerRecords {
	enum PacketID {
		ID = 270;
	}

	repeated PlayerRecord records = 1;
}

message RewardProgress {
	enum PacketID {
		ID = 271;
	}

	required PegasusShared.Date season_end = 1;
	required int32 wins_per_gold = 2;
	required int32 gold_per_reward = 3;
	required int32 max_gold_per_day = 4;
	required int32 season_number = 5;
	optional int32 pack_id = 8;
	required int32 xp_solo_limit = 9;
	required int32 max_hero_level = 10;
	required PegasusShared.Date next_quest_cancel = 11;
	required float event_timing_mod = 12;
}

message CancelPurchaseResponse {
	enum CancelResult {
		CR_SUCCESS = 1;
		CR_NOT_ALLOWED = 2;
		CR_NOTHING_TO_CANCEL = 3;
	}
	enum PacketID {
		ID = 275;
	}

	required CancelResult result = 1;
	optional int64 transaction_id = 2;
	optional string product_id = 3;
	optional int32 currency = 4;
}

message PurchaseWithGoldResponse {
	enum PurchaseResult {
		PR_SUCCESS = 1;
		PR_INSUFFICIENT_FUNDS = 2;
		PR_PRODUCT_NA = 3;
		PR_FEATURE_NA = 4;
		PR_INVALID_QUANTITY = 5;
	}
	enum PacketID {
		ID = 280;
	}

	required PurchaseResult result = 1;
	optional int64 gold_used = 2;
}

message CancelQuestResponse {
	enum PacketID {
		ID = 282;
	}

	required int32 quest_id = 1;
	required bool success = 2;
	optional PegasusShared.Date next_quest_cancel = 3;
}

message HeroXP {
	enum PacketID {
		ID = 283;
	}

	repeated HeroXPInfo xp_infos = 1;
}

message SetCardBackResponse {
	enum PacketID {
		ID = 292;
	}

	required bool success = 1;
	required int32 card_back = 2;
}

message ThirdPartyPurchaseStatusResponse {
	enum Status {
		NOT_FOUND = 1;
		SUCCEEDED = 2;
		FAILED = 3;
		IN_PROGRESS = 4;
	}
	enum PacketID {
		ID = 295;
	}

	required string third_party_id = 1;
	required Status status = 2;
}

message SetProgressResponse {
	enum Result {
		SUCCESS = 1;
		FAILED = 2;
		ALREADY_DONE = 3;
	}
	enum PacketID {
		ID = 296;
	}

	required Result result = 1;
	optional int64 progress = 2;
}

message TriggerEventResponse {
	enum PacketID {
		ID = 299;
	}

	required int32 event_id = 1;
	required bool success = 2;
}

message AssetsVersionResponse {
	enum PacketID {
		ID = 304;
	}

	required int32 version = 1;
}

message AdventureProgressResponse {
	enum PacketID {
		ID = 306;
	}

	repeated PegasusShared.AdventureProgress list = 1;
}

message AccountLicenseAchieveResponse {
	enum Result {
		INVALID_ACHIEVE = 1;
		NOT_ACTIVE = 2;
		IN_PROGRESS = 3;
		COMPLETE = 4;
		STATUS_UNKNOWN = 5;
	}
	enum PacketID {
		ID = 311;
	}

	required int32 achieve = 1;
	required Result result = 2;
}

message SubscribeResponse {
	enum ResponseResult {
		SUCCESS = 1;
		FAILED_UNAVAILABLE = 2;
	}
	enum PacketID {
		ID = 315;
	}

	optional uint64 route = 1;
	optional uint64 keep_alive_secs = 3;
	optional uint64 max_resubscribe_attempts = 4 [default = 0];
	optional uint64 pending_response_timeout = 5 [default = 0];
	optional uint64 pending_subscribe_timeout = 6 [default = 0];
	optional ResponseResult result = 7 [default = SUCCESS];
	optional uint64 request_max_wait_secs = 8;
}

message TavernBrawlInfo {
	enum PacketID {
		ID = 316;
	}

	optional PegasusShared.TavernBrawlSpec current_tavern_brawl = 1;
	optional uint64 next_start_seconds_from_now = 2;
}

message TavernBrawlPlayerRecordResponse {
	enum PacketID {
		ID = 317;
	}

	optional PegasusShared.TavernBrawlPlayerRecord record = 6;
}

message FavoriteHeroesResponse {
	enum PacketID {
		ID = 318;
	}

	repeated PegasusShared.FavoriteHero favorite_heroes = 1;
}

message SetFavoriteHeroResponse {
	enum PacketID {
		ID = 320;
	}

	required bool success = 1;
	optional PegasusShared.FavoriteHero favorite_hero = 2;
}

message GetAssetResponse {
	enum PacketID {
		ID = 322;
	}

	repeated AssetResponse responses = 1;
	required int32 client_token = 3;
}

message DebugCommandResponse {
	enum PacketID {
		ID = 324;
	}

	required bool success = 1;
	optional string response = 2;
}

message AccountLicensesInfoResponse {
	enum PacketID {
		ID = 325;
	}

	repeated PegasusShared.AccountLicenseInfo list = 1;
}

message GenericData {
	required uint32 type_id = 1;
	required bytes data = 2;
}

message GenericResponse {
	enum Result {
		RESULT_OK = 0;
		RESULT_REQUEST_IN_PROCESS = 1;
		RESULT_REQUEST_COMPLETE = 2;
		RESULT_UNKNOWN_ERROR = 100;
		RESULT_INTERNAL_ERROR = 101;
		RESULT_DB_ERROR = 102;
		RESULT_INVALID_REQUEST = 103;
		RESULT_LOGIN_LOAD = 104;
		RESULT_DATA_MIGRATION_ERROR = 105;
	}
	enum PacketID {
		ID = 326;
	}

	required Result result_code = 1;
	required int32 request_id = 2;
	optional int32 request_sub_id = 3;
	optional GenericData generic_data = 4;
}

message GenericRequest {
	required int32 request_id = 1;
	optional GenericData generic_data = 2;
	optional int32 request_sub_id = 3;
}

message GenericRequestList {
	enum PacketID {
		ID = 327;
		System = 0;
	}

	repeated GenericRequest requests = 1;
}

message ClientRequestResponse {
	enum ClientRequestResponseFlags {
		CRRF_SERVICE_NONE = 0;
		CRRF_SERVICE_UNAVAILABLE = 1;
		CRRF_SERVICE_UNKNOWN_ERROR = 2;
	}
	enum PacketID {
		ID = 328;
	}

	optional ClientRequestResponseFlags response_flags = 1 [default = CRRF_SERVICE_NONE];
}

message CheckAccountLicensesResponse {
	enum PacketID {
		ID = 330;
	}

	required bool success = 1;
}

message CheckGameLicensesResponse {
	enum PacketID {
		ID = 331;
	}

	required bool success = 1;
}

message DeckSetTemplateSource {
	enum PacketID {
		ID = 332;
		System = 0;
	}

	required int64 deck = 1;
	required int32 template_id = 2;
}

message RpcHeader {
	required uint64 type = 1;
	optional uint64 retry_count = 2 [default = 0];
}

message RpcMessage {
	required RpcHeader rpc_header = 1;
	optional bytes message_body = 2;
}

enum ProductType {
	PRODUCT_TYPE_UNKNOWN = 0;
	PRODUCT_TYPE_BOOSTER = 1;
	PRODUCT_TYPE_DRAFT = 2;
	PRODUCT_TYPE_NAXX = 3;
	PRODUCT_TYPE_BRM = 4;
	PRODUCT_TYPE_CARD_BACK = 5;
	PRODUCT_TYPE_HERO = 6;
	PRODUCT_TYPE_LOE = 7;
}

